#pragma once
#include "Data/DataType.h"

enum GraphicsAPI {
  D3D11_WIN_API,
  NULL_GRAPHICS_API,
};

enum GraphicsHandleType {
  GH_VERTEX_BUFFER,
  GH_VERTEX_DECL,
  GH_INDEX_BUFFER,
  GH_FRAME_BUFFER,
  GH_TEXTURE,
  GH_SHADER,
  GH_PROGRAM,
  GH_UNIFORM,
  GH_DYNAMIC_VERTEX_BUFFER,
  GH_DYNAMIC_INDEX_BUFFER,
};

enum ConstantType {
  CONSTANT_BOOL32,
  CONSTANT_INT,
  CONSTANT_FLOAT,
  CONSTANT_VEC2,
  CONSTANT_VEC3,
  CONSTANT_VEC4,
  CONSTANT_MAT3,
  CONSTANT_MAT4,
  CONSTANT_END,
  CONSTANT_COUNT
};

enum ShaderType {
  INVALID_SHADER = -1,
  VERTEX_SHADER,
  GEOMETRY_SHADER,
  FRAGMENT_SHADER,
  SHADER_TYPE_COUNT
};

enum BufferUsage {
  STATIC_USAGE,
  DYNAMIC_USAGE,
  STREAM_USAGE,
  BUFFER_USAGE_COUNT
};

enum PrimitiveType {
  INVALID_PRIMITIVE_TYPE = -1,
  POINT_LIST,
  LINE_LIST,
  LINE_STRIP,
  LINE_LOOP,
  TRIANGLE_LIST,
  TRIANGLE_STRIP,
  TRIANGLE_FAN,
  PRIMITIVE_TYPE_COUNT
};

enum CullMode {
  CULL_NONE,
  CULL_BACK,
  CULL_FRONT,
  CULL_MODE_COUNT
};

enum VertexDirection {
  INVALID_VERTEX_DIRECTION = -1,
  CLOCKWISE,
  COUNTER_CLOCKWISE,
  VERTEX_DIRECTION_COUNT
};

enum DepthFunction {
  LESS_DEPTH_FUNCTION,
  LESS_EQUAL_DEPTH_FUNCTION,
  EQUAL_DEPTH_FUNCTION,
  GREATER_EQUAL_DEPTH_FUNCTION,
  GREATER_DEPTH_FUNCTION,
  NOT_EQUAL_DEPTH_FUNCTION,
  NEVER_DEPTH_FUNCTION,
  ALWAYS_DEPTH_FUNCTION,
  DEPTH_FUNCTION_COUNT
};

enum TextureFilter {
  NEAREST_FILTER,
  LINEAR_FILTER,
  MIPMAP_FILTER_START,
  NEAREST_MIPMAP_NEAREST_FILTER = MIPMAP_FILTER_START,
  LINEAR_MIPMAP_NEAREST_FILTER,
  NEAREST_MIPMAP_LINEAR_FILTER,
  LINEAR_MIPMAP_LINEAR_FILTER,
  TEXTURE_FILTER_COUNT
};

enum TextureWrapMode {
  REPEAT_WRAP_MODE,
  CLAMP_TO_EDGE_WRAP_MODE,
  MIRRORED_REPEAT_WRAP_MODE,
  TEXTURE_WRAP_MODE_COUNT
};

enum AttachmentPoint {
  COLOR_ATTACHMENT0,
  COLOR_ATTACHMENT1,
  COLOR_ATTACHMENT2,
  COLOR_ATTACHMENT3,
  COLOR_ATTACHMENT4,
  COLOR_ATTACHMENT5,
  COLOR_ATTACHMENT6,
  COLOR_ATTACHMENT7,
  COLOR_ATTACHMENT_COUNT,
  DEPTH_ATTACHMENT = COLOR_ATTACHMENT_COUNT,
  ATTACHMENT_POINT_COUNT
};

enum PixelFormat {
  INVALID_PIXEL_FORMAT = -1,
  RED_PIXEL_FORMAT,
  RG_PIXEL_FORMAT,
  RGB_PIXEL_FORMAT,
  BGR_PIXEL_FORMAT,
  RGBA_PIXEL_FORMAT,
  RGBX_PIXEL_FORMAT,
  BGRA_PIXEL_FORMAT,
  BGRX_PIXEL_FORMAT,
  DEPTH_COMPONENT_PIXEL_FORMAT,
  PIXEL_FORMAT_COUNT
};

enum PixelDatatype {
  INVALID_PIXEL_DATATYPE = -1,
  BYTE_PIXEL_DATATYPE,
  UNSIGNED_BYTE_PIXEL_DATATYPE,
  SHORT_PIXEL_DATATYPE,
  UNSIGNED_SHORT_PIXEL_DATATYPE,
  INT_PIXEL_DATATYPE,
  UNSIGNED_INT_PIXEL_DATATYPE,
  FLOAT_PIXEL_DATATYPE,
  UNSIGNED_SHORT_4444_PIXEL_DATATYPE,
  UNSIGNED_SHORT_4444_REVERSED_PIXEL_DATATYPE,
  UNSIGNED_SHORT_5551_PIXEL_DATATYPE,
  UNSIGNED_SHORT_1555_REVERSED_PIXEL_DATATYPE,
  UNSIGNED_SHORT_565_PIXEL_DATATYPE,
  UNSIGNED_SHORT_565_REVERSED_PIXEL_DATATYPE,
  UNSIGNED_INT_8888_PIXEL_DATATYPE,
  UNSIGNED_INT_8888_REVERSED_PIXEL_DATATYPE,
  PIXEL_DATATYPE_COUNT
};

enum TextureFormat {
  INVALID_TEXTURE_FORMAT = -1,
  RED_8_TEXTURE_FORMAT,
  RG_8_TEXTURE_FORMAT,
  RGB_8_TEXTURE_FORMAT,
  RGBA_8_TEXTURE_FORMAT,
  RED_32_FLOAT_TEXTURE_FORMAT,
  RGB_16_FLOAT_TEXTURE_FORMAT,
  RGBA_16_FLOAT_TEXTURE_FORMAT,
  RGB_32_FLOAT_TEXTURE_FORMAT,
  RGBA_32_FLOAT_TEXTURE_FORMAT,
  DEPTH_16_TEXTURE_FORMAT,
  DEPTH_24_TEXTURE_FORMAT,
  DEPTH_32_FLOAT_TEXTURE_FORMAT,
  COMPRESSED_TEXTURE_FORMAT_START,
  DXT1_RGB_TEXTURE_FORMAT = COMPRESSED_TEXTURE_FORMAT_START,  // 4-bpp
  DXT1_ARGB_TEXTURE_FORMAT, // 4-bpp, 1-bit alpha
  DXT3_ARGB_TEXTURE_FORMAT, // 8-bpp, explicit alpha
  DXT5_ARGB_TEXTURE_FORMAT, // 8-bpp, interpolated alpha
  TEXTURE_FORMAT_COUNT
};

enum BlendFactor {
  ZERO_BLEND_FACTOR,
  ONE_BLEND_FACTOR,
  SRC_COLOR_BLEND_FACTOR,
  ONE_MINUS_SRC_COLOR_BLEND_FACTOR,
  DST_COLOR_BLEND_FACTOR,
  ONE_MINUS_DST_COLOR_BLEND_FACTOR,
  SRC_ALPHA_BLEND_FACTOR,
  ONE_MINUS_SRC_ALPHA_BLEND_FACTOR,
  DST_ALPHA_BLEND_FACTOR,
  ONE_MINUS_DST_ALPHA_BLEND_FACTOR,
  CONSTANT_COLOR_BLEND_FACTOR,
  ONE_MINUS_CONSTANT_COLOR_BLEND_FACTOR,
  CONSTANT_ALPHA_BLEND_FACTOR,
  ONE_MINUS_CONSTANT_ALPHA_BLEND_FACTOR,
  SRC_ALPHA_SATURATE_BLEND_FACTOR,
  BLEND_FACTOR_COUNT
};

enum BlendOperator {
  ADD_BLEND_OPERATOR,
  SUBTRACT_BLEND_OPERATOR,
  REVERSE_SUBTRACT_BLEND_OPERATOR,
  BLEND_OPERATOR_COUNT
};

enum PredefinedConstantType {
  PREDEFINED_CONSTANT_VIEW_RECT,
  PREDEFINED_CONSTANT_VIEW_TEXEL,
  PREDEFINED_CONSTANT_VIEW,
  PREDEFINED_CONSTANT_INV_VIEW,
  PREDEFINED_CONSTANT_PROJ,
  PREDEFINED_CONSTANT_INV_PROJ,
  PREDEFINED_CONSTANT_VIEW_PROJ,
  PREDEFINED_CONSTANT_INV_VIEW_PROJ,
  PREDEFINED_CONSTANT_MODEL,
  PREDEFINED_CONSTANT_INV_MODEL,
  PREDEFINED_CONSTANT_MODEL_VIEW,
  PREDEFINED_CONSTANT_MODEL_VIEW_PROJ,
  PREDEFINED_CONSTANT_ALPHA_REF,
  PREDEFINED_CONSTANT_TIME,
  PREDEFINED_CONSTANT_EYE,
  PREDEFINED_CONSTANT_COUNT,
};

extern const int TEXTURE_FORMAT_WIDTH[TEXTURE_FORMAT_COUNT];
extern const char* const TEXTURE_FORMAT_NAME[TEXTURE_FORMAT_COUNT];
extern const PixelFormat TEXTURE_FORMAT_TO_PIXEL_FORMAT[TEXTURE_FORMAT_COUNT];
extern const u32 PREDEFINED_CONSTANT_NAME[PREDEFINED_CONSTANT_COUNT];

#ifdef _DEBUG
#define C3_DEBUG_CONTEXT              1
#else
#define C3_DEBUG_CONTEXT              0
#endif

///
#define C3_RESET_NONE                  UINT32_C(0x00000000) //!< No reset flags.
#define C3_RESET_FULLSCREEN            UINT32_C(0x00000001) //!< Toggle fullscreen.
#define C3_RESET_FULLSCREEN_SHIFT      0                    //!< Fullscreen bit shift.
#define C3_RESET_FULLSCREEN_MASK       UINT32_C(0x00000001) //!< Fullscreen bit mask.
#define C3_RESET_MSAA_X2               UINT32_C(0x00000010) //!< Enable 2x MSAA.
#define C3_RESET_MSAA_X4               UINT32_C(0x00000020) //!< Enable 4x MSAA.
#define C3_RESET_MSAA_X8               UINT32_C(0x00000030) //!< Enable 8x MSAA.
#define C3_RESET_MSAA_X16              UINT32_C(0x00000040) //!< Enable 16x MSAA.
#define C3_RESET_MSAA_SHIFT            4                    //!< MSAA mode bit shift.
#define C3_RESET_MSAA_MASK             UINT32_C(0x00000070) //!< MSAA mode bit mask.
#define C3_RESET_VSYNC                 UINT32_C(0x00000080) //!< Enable V-Sync.
#define C3_RESET_MAXANISOTROPY         UINT32_C(0x00000100) //!< Turn on/off max anisotropy.
#define C3_RESET_FLUSH_AFTER_RENDER    UINT32_C(0x00002000) //!< Flush rendering after submitting to GPU.
#define C3_RESET_SRGB_BACKBUFFER       UINT32_C(0x00008000) //!< Enable sRGB backbuffer.
#define C3_RESET_HIDPI                 UINT32_C(0x00010000) //!< Enable HiDPI rendering.

///
#define C3_BUFFER_NONE                 UINT16_C(0x0000) //!<
#define C3_BUFFER_COMPUTE_FORMAT_8x1   UINT16_C(0x0001) //!<
#define C3_BUFFER_COMPUTE_FORMAT_8x2   UINT16_C(0x0002) //!<
#define C3_BUFFER_COMPUTE_FORMAT_8x4   UINT16_C(0x0003) //!<
#define C3_BUFFER_COMPUTE_FORMAT_16x1  UINT16_C(0x0004) //!<
#define C3_BUFFER_COMPUTE_FORMAT_16x2  UINT16_C(0x0005) //!<
#define C3_BUFFER_COMPUTE_FORMAT_16x4  UINT16_C(0x0006) //!<
#define C3_BUFFER_COMPUTE_FORMAT_32x1  UINT16_C(0x0007) //!<
#define C3_BUFFER_COMPUTE_FORMAT_32x2  UINT16_C(0x0008) //!<
#define C3_BUFFER_COMPUTE_FORMAT_32x4  UINT16_C(0x0009) //!<
#define C3_BUFFER_COMPUTE_FORMAT_SHIFT 0                //!<
#define C3_BUFFER_COMPUTE_FORMAT_MASK  UINT16_C(0x000f) //!<

#define C3_BUFFER_COMPUTE_TYPE_UINT    UINT16_C(0x0010) //!<
#define C3_BUFFER_COMPUTE_TYPE_INT     UINT16_C(0x0020) //!<
#define C3_BUFFER_COMPUTE_TYPE_FLOAT   UINT16_C(0x0030) //!<
#define C3_BUFFER_COMPUTE_TYPE_SHIFT   4                //!<
#define C3_BUFFER_COMPUTE_TYPE_MASK    UINT16_C(0x0030) //!<

#define C3_BUFFER_COMPUTE_READ         UINT16_C(0x0100) //!< Buffer will be read by shader.
#define C3_BUFFER_COMPUTE_WRITE        UINT16_C(0x0200) //!< Buffer will be used for writing.
#define C3_BUFFER_DRAW_INDIRECT        UINT16_C(0x0400) //!< Buffer will be used for storing draw indirect commands.
#define C3_BUFFER_ALLOW_RESIZE         UINT16_C(0x0800) //!<
#define C3_BUFFER_INDEX32              UINT16_C(0x1000) //!<

#define C3_BUFFER_COMPUTE_READ_WRITE (0 \
			| C3_BUFFER_COMPUTE_READ \
			| C3_BUFFER_COMPUTE_WRITE \
			)

///
#define C3_STATE_RGB_WRITE             UINT64_C(0x0000000000000001) //!< Enable RGB write.
#define C3_STATE_ALPHA_WRITE           UINT64_C(0x0000000000000002) //!< Enable alpha write.
#define C3_STATE_DEPTH_WRITE           UINT64_C(0x0000000000000004) //!< Enable depth write.

//#define C3_STATE_DEPTH_TEST_NONE       UINT64_C(0x0000000000000000) //!< Disable depth test.
#define C3_STATE_DEPTH_TEST_LESS       UINT64_C(0x0000000000000010) //!< Enable depth test, less.
#define C3_STATE_DEPTH_TEST_LEQUAL     UINT64_C(0x0000000000000020) //!< Enable depth test, less equal.
#define C3_STATE_DEPTH_TEST_EQUAL      UINT64_C(0x0000000000000030) //!<
#define C3_STATE_DEPTH_TEST_GEQUAL     UINT64_C(0x0000000000000040) //!<
#define C3_STATE_DEPTH_TEST_GREATER    UINT64_C(0x0000000000000050) //!<
#define C3_STATE_DEPTH_TEST_NOTEQUAL   UINT64_C(0x0000000000000060) //!<
#define C3_STATE_DEPTH_TEST_NEVER      UINT64_C(0x0000000000000070) //!<
#define C3_STATE_DEPTH_TEST_ALWAYS     UINT64_C(0x0000000000000080) //!<
#define C3_STATE_DEPTH_TEST_SHIFT      4
#define C3_STATE_DEPTH_TEST_MASK       UINT64_C(0x00000000000000f0) //!< Depth test state bit mask.

#define C3_STATE_BLEND_ZERO            UINT64_C(0x0000000000001000) //!<
#define C3_STATE_BLEND_ONE             UINT64_C(0x0000000000002000) //!<
#define C3_STATE_BLEND_SRC_COLOR       UINT64_C(0x0000000000003000) //!<
#define C3_STATE_BLEND_INV_SRC_COLOR   UINT64_C(0x0000000000004000) //!<
#define C3_STATE_BLEND_SRC_ALPHA       UINT64_C(0x0000000000005000) //!<
#define C3_STATE_BLEND_INV_SRC_ALPHA   UINT64_C(0x0000000000006000) //!<
#define C3_STATE_BLEND_DST_ALPHA       UINT64_C(0x0000000000007000) //!<
#define C3_STATE_BLEND_INV_DST_ALPHA   UINT64_C(0x0000000000008000) //!<
#define C3_STATE_BLEND_DST_COLOR       UINT64_C(0x0000000000009000) //!<
#define C3_STATE_BLEND_INV_DST_COLOR   UINT64_C(0x000000000000a000) //!<
#define C3_STATE_BLEND_SRC_ALPHA_SAT   UINT64_C(0x000000000000b000) //!<
#define C3_STATE_BLEND_FACTOR          UINT64_C(0x000000000000c000) //!<
#define C3_STATE_BLEND_INV_FACTOR      UINT64_C(0x000000000000d000) //!<
#define C3_STATE_BLEND_SHIFT           12                           //!< Blend state bit shift.
#define C3_STATE_BLEND_MASK            UINT64_C(0x000000000ffff000) //!< Blend state bit mask.

#define C3_STATE_BLEND_EQUATION_ADD    UINT64_C(0x0000000000000000) //!<
#define C3_STATE_BLEND_EQUATION_SUB    UINT64_C(0x0000000010000000) //!<
#define C3_STATE_BLEND_EQUATION_REVSUB UINT64_C(0x0000000020000000) //!<
#define C3_STATE_BLEND_EQUATION_MIN    UINT64_C(0x0000000030000000) //!<
#define C3_STATE_BLEND_EQUATION_MAX    UINT64_C(0x0000000040000000) //!<
#define C3_STATE_BLEND_EQUATION_SHIFT  28                           //!< Blend equation bit shift.
#define C3_STATE_BLEND_EQUATION_MASK   UINT64_C(0x00000003f0000000) //!< Blend equation bit mask.

#define C3_STATE_BLEND_INDEPENDENT     UINT64_C(0x0000000400000000) //!< Enable blend independent.

//#define C3_STATE_CULL_CW               UINT64_C(0x0000000000000000) //!< Cull none.
#define C3_STATE_CULL_CW               UINT64_C(0x0000001000000000) //!< Cull clockwise triangles.
#define C3_STATE_CULL_CCW              UINT64_C(0x0000002000000000) //!< Cull counter-clockwise triangles.
#define C3_STATE_CULL_SHIFT            36                           //!< Culling mode bit shift.
#define C3_STATE_CULL_MASK             UINT64_C(0x0000003000000000) //!< Culling mode bit mask.

#define C3_STATE_ALPHA_REF_SHIFT       40                           //!<
#define C3_STATE_ALPHA_REF_MASK        UINT64_C(0x0000ff0000000000) //!<

//#define C3_STATE_PT_TRIANGLE           UINT64_C(0x0000000000000000) //!< Triangle.
#define C3_STATE_PT_TRISTRIP           UINT64_C(0x0001000000000000) //!< Triangle strip.
#define C3_STATE_PT_LINES              UINT64_C(0x0002000000000000) //!< Lines.
#define C3_STATE_PT_LINESTRIP          UINT64_C(0x0003000000000000)  //!< Line strip.
#define C3_STATE_PT_POINTS             UINT64_C(0x0004000000000000) //!< Points.
#define C3_STATE_PT_SHIFT              48                           //!< Primitive type bit shift.
#define C3_STATE_PT_MASK               UINT64_C(0x0007000000000000) //!< Primitive type bit mask.

#define C3_STATE_POINT_SIZE_SHIFT      52                           //!<
#define C3_STATE_POINT_SIZE_MASK       UINT64_C(0x0ff0000000000000) //!<

/// Enable MSAA write when writing into MSAA frame buffer. This flag is ignored when not writing into
/// MSAA frame buffer.
#define C3_STATE_MSAA                  UINT64_C(0x1000000000000000) //!<

#define C3_STATE_RESERVED_MASK         UINT64_C(0xe000000000000000) //!<

#define C3_STATE_NONE                  UINT64_C(0x0000000000000000) //!<
#define C3_STATE_MASK                  UINT64_C(0xffffffffffffffff) //!<

/// Default state is write to RGB, alpha, and depth with depth test less enabled, with clockwise
/// culling and MSAA (when writing into MSAA frame buffer, otherwise this flag is ignored).
#define C3_STATE_DEFAULT \
  (C3_STATE_RGB_WRITE | C3_STATE_ALPHA_WRITE | C3_STATE_DEPTH_TEST_LESS | C3_STATE_DEPTH_WRITE | C3_STATE_CULL_CW)
#define C3_STATE_ALPHA_REF(ref)   (((u64)(ref) << C3_STATE_ALPHA_REF_SHIFT) & C3_STATE_ALPHA_REF_MASK)
#define C3_STATE_POINT_SIZE(size) (((u64)(size) << C3_STATE_POINT_SIZE_SHIFT) & C3_STATE_POINT_SIZE_MASK)

///
#define C3_STATE_BLEND_FUNC_SEPARATE(src_rgb, dst_rgb, src_a, dst_a) (UINT64_C(0) \
					| (((u64)(src_rgb) | ((u64)(dst_rgb) << 4))     ) \
					| (((u64)(src_a  ) | ((u64)(dst_a  ) << 4)) << 8) \
					)

#define C3_STATE_BLEND_EQUATION_SEPARATE(rgb, a) ((u64)(rgb) | ((u64)(a) << 3))

///
#define C3_STATE_BLEND_FUNC(src, dst)     C3_STATE_BLEND_FUNC_SEPARATE(src, dst, src, dst)
#define C3_STATE_BLEND_EQUATION(equation) C3_STATE_BLEND_EQUATION_SEPARATE(equation, equation)

#define C3_STATE_BLEND_ADD         (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_ONE,       C3_STATE_BLEND_ONE          ))
#define C3_STATE_BLEND_ALPHA       (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_SRC_ALPHA, C3_STATE_BLEND_INV_SRC_ALPHA))
#define C3_STATE_BLEND_DARKEN      (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_ONE,       C3_STATE_BLEND_ONE          ) | C3_STATE_BLEND_EQUATION(C3_STATE_BLEND_EQUATION_MIN))
#define C3_STATE_BLEND_LIGHTEN     (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_ONE,       C3_STATE_BLEND_ONE          ) | C3_STATE_BLEND_EQUATION(C3_STATE_BLEND_EQUATION_MAX))
#define C3_STATE_BLEND_MULTIPLY    (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_DST_COLOR, C3_STATE_BLEND_ZERO         ))
#define C3_STATE_BLEND_NORMAL      (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_ONE,       C3_STATE_BLEND_INV_SRC_ALPHA))
#define C3_STATE_BLEND_SCREEN      (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_ONE,       C3_STATE_BLEND_INV_SRC_COLOR))
#define C3_STATE_BLEND_LINEAR_BURN (C3_STATE_BLEND_FUNC(C3_STATE_BLEND_DST_COLOR, C3_STATE_BLEND_INV_DST_COLOR) | C3_STATE_BLEND_EQUATION(C3_STATE_BLEND_EQUATION_SUB))

///
#define C3_STATE_BLEND_FUNC_RT_x(src, dst) (0 \
					| (u32((src) >> C3_STATE_BLEND_SHIFT) \
					| (u32((dst) >> C3_STATE_BLEND_SHIFT) << 4)) \
					)

#define C3_STATE_BLEND_FUNC_RT_xE(src, dst, equation) (0 \
					| C3_STATE_BLEND_FUNC_RT_x(src, dst) \
					| (u32((equation) >> C3_STATE_BLEND_EQUATION_SHIFT) << 8) \
					)

#define C3_STATE_BLEND_FUNC_RT_1(src, dst)  (C3_STATE_BLEND_FUNC_RT_x(src, dst) << 0)
#define C3_STATE_BLEND_FUNC_RT_2(src, dst)  (C3_STATE_BLEND_FUNC_RT_x(src, dst) << 11)
#define C3_STATE_BLEND_FUNC_RT_3(src, dst)  (C3_STATE_BLEND_FUNC_RT_x(src, dst) << 22)

#define C3_STATE_BLEND_FUNC_RT_1E(src, dst, equation) (C3_STATE_BLEND_FUNC_RT_xE(src, dst, equation) << 0)
#define C3_STATE_BLEND_FUNC_RT_2E(src, dst, equation) (C3_STATE_BLEND_FUNC_RT_xE(src, dst, equation) << 11)
#define C3_STATE_BLEND_FUNC_RT_3E(src, dst, equation) (C3_STATE_BLEND_FUNC_RT_xE(src, dst, equation) << 22)

///
#define C3_STENCIL_FUNC_REF_SHIFT      0                    //!<
#define C3_STENCIL_FUNC_REF_MASK       UINT32_C(0x000000ff) //!<
#define C3_STENCIL_FUNC_RMASK_SHIFT    8                    //!<
#define C3_STENCIL_FUNC_RMASK_MASK     UINT32_C(0x0000ff00) //!<

#define C3_STENCIL_TEST_LESS           UINT32_C(0x00010000) //!< Enable stencil test, less.
#define C3_STENCIL_TEST_LEQUAL         UINT32_C(0x00020000) //!<
#define C3_STENCIL_TEST_EQUAL          UINT32_C(0x00030000) //!<
#define C3_STENCIL_TEST_GEQUAL         UINT32_C(0x00040000) //!<
#define C3_STENCIL_TEST_GREATER        UINT32_C(0x00050000) //!<
#define C3_STENCIL_TEST_NOTEQUAL       UINT32_C(0x00060000) //!<
#define C3_STENCIL_TEST_NEVER          UINT32_C(0x00070000) //!<
#define C3_STENCIL_TEST_ALWAYS         UINT32_C(0x00080000) //!<
#define C3_STENCIL_TEST_SHIFT          16                   //!<
#define C3_STENCIL_TEST_MASK           UINT32_C(0x000f0000) //!<

#define C3_STENCIL_OP_FAIL_S_ZERO      UINT32_C(0x00000000) //!<
#define C3_STENCIL_OP_FAIL_S_KEEP      UINT32_C(0x00100000) //!<
#define C3_STENCIL_OP_FAIL_S_REPLACE   UINT32_C(0x00200000) //!<
#define C3_STENCIL_OP_FAIL_S_INCR      UINT32_C(0x00300000) //!<
#define C3_STENCIL_OP_FAIL_S_INCRSAT   UINT32_C(0x00400000) //!<
#define C3_STENCIL_OP_FAIL_S_DECR      UINT32_C(0x00500000) //!<
#define C3_STENCIL_OP_FAIL_S_DECRSAT   UINT32_C(0x00600000) //!<
#define C3_STENCIL_OP_FAIL_S_INVERT    UINT32_C(0x00700000) //!<
#define C3_STENCIL_OP_FAIL_S_SHIFT     20                   //!<
#define C3_STENCIL_OP_FAIL_S_MASK      UINT32_C(0x00f00000) //!<

#define C3_STENCIL_OP_FAIL_Z_ZERO      UINT32_C(0x00000000) //!<
#define C3_STENCIL_OP_FAIL_Z_KEEP      UINT32_C(0x01000000) //!<
#define C3_STENCIL_OP_FAIL_Z_REPLACE   UINT32_C(0x02000000) //!<
#define C3_STENCIL_OP_FAIL_Z_INCR      UINT32_C(0x03000000) //!<
#define C3_STENCIL_OP_FAIL_Z_INCRSAT   UINT32_C(0x04000000) //!<
#define C3_STENCIL_OP_FAIL_Z_DECR      UINT32_C(0x05000000) //!<
#define C3_STENCIL_OP_FAIL_Z_DECRSAT   UINT32_C(0x06000000) //!<
#define C3_STENCIL_OP_FAIL_Z_INVERT    UINT32_C(0x07000000) //!<
#define C3_STENCIL_OP_FAIL_Z_SHIFT     24                   //!<
#define C3_STENCIL_OP_FAIL_Z_MASK      UINT32_C(0x0f000000) //!<

#define C3_STENCIL_OP_PASS_Z_ZERO      UINT32_C(0x00000000) //!<
#define C3_STENCIL_OP_PASS_Z_KEEP      UINT32_C(0x10000000) //!<
#define C3_STENCIL_OP_PASS_Z_REPLACE   UINT32_C(0x20000000) //!<
#define C3_STENCIL_OP_PASS_Z_INCR      UINT32_C(0x30000000) //!<
#define C3_STENCIL_OP_PASS_Z_INCRSAT   UINT32_C(0x40000000) //!<
#define C3_STENCIL_OP_PASS_Z_DECR      UINT32_C(0x50000000) //!<
#define C3_STENCIL_OP_PASS_Z_DECRSAT   UINT32_C(0x60000000) //!<
#define C3_STENCIL_OP_PASS_Z_INVERT    UINT32_C(0x70000000) //!<
#define C3_STENCIL_OP_PASS_Z_SHIFT     28                   //!<
#define C3_STENCIL_OP_PASS_Z_MASK      UINT32_C(0xf0000000) //!<

#define C3_STENCIL_NONE                UINT32_C(0x00000000) //!<
#define C3_STENCIL_MASK                UINT32_C(0xffffffff) //!<
#define C3_STENCIL_DEFAULT             UINT32_C(0x00000000) //!<

/// Set stencil ref value.
#define C3_STENCIL_FUNC_REF(ref) ((u32(ref) << C3_STENCIL_FUNC_REF_SHIFT) & C3_STENCIL_FUNC_REF_MASK)

/// Set stencil rmask value.
#define C3_STENCIL_FUNC_RMASK(mask) ((u32(mask) << C3_STENCIL_FUNC_RMASK_SHIFT) & C3_STENCIL_FUNC_RMASK_MASK)

///
#define C3_CLEAR_NONE                 UINT16_C(0x0000) //!< No clear flags.
#define C3_CLEAR_COLOR                UINT16_C(0x0001) //!< Clear color.
#define C3_CLEAR_DEPTH                UINT16_C(0x0002) //!< Clear depth.
#define C3_CLEAR_STENCIL              UINT16_C(0x0004) //!< Clear stencil.
#define C3_CLEAR_DISCARD_COLOR_0      UINT16_C(0x0008) //!< Discard frame buffer attachment 0.
#define C3_CLEAR_DISCARD_COLOR_1      UINT16_C(0x0010) //!< Discard frame buffer attachment 1.
#define C3_CLEAR_DISCARD_COLOR_2      UINT16_C(0x0020) //!< Discard frame buffer attachment 2.
#define C3_CLEAR_DISCARD_COLOR_3      UINT16_C(0x0040) //!< Discard frame buffer attachment 3.
#define C3_CLEAR_DISCARD_COLOR_4      UINT16_C(0x0080) //!< Discard frame buffer attachment 4.
#define C3_CLEAR_DISCARD_COLOR_5      UINT16_C(0x0100) //!< Discard frame buffer attachment 5.
#define C3_CLEAR_DISCARD_COLOR_6      UINT16_C(0x0200) //!< Discard frame buffer attachment 6.
#define C3_CLEAR_DISCARD_COLOR_7      UINT16_C(0x0400) //!< Discard frame buffer attachment 7.
#define C3_CLEAR_DISCARD_DEPTH        UINT16_C(0x0800) //!< Discard frame buffer depth attachment.
#define C3_CLEAR_DISCARD_STENCIL      UINT16_C(0x1000) //!< Discard frame buffer stencil attachment.
#define C3_CLEAR_DISCARD_COLOR_MASK \
  (C3_CLEAR_DISCARD_COLOR_0 | C3_CLEAR_DISCARD_COLOR_1 | C3_CLEAR_DISCARD_COLOR_2 | \
   C3_CLEAR_DISCARD_COLOR_3 | C3_CLEAR_DISCARD_COLOR_4 | C3_CLEAR_DISCARD_COLOR_5 | \
   C3_CLEAR_DISCARD_COLOR_6 | C3_CLEAR_DISCARD_COLOR_7)
#define C3_CLEAR_DISCARD_MASK \
  (C3_CLEAR_DISCARD_COLOR_MASK | C3_CLEAR_DISCARD_DEPTH | C3_CLEAR_DISCARD_STENCIL)

#define C3_CLEAR_COLOR_USE_PALETTE UINT16_C(0x8000)
#define C3_CLEAR_MASK (C3_CLEAR_COLOR | C3_CLEAR_DEPTH | C3_CLEAR_STENCIL | C3_CLEAR_COLOR_USE_PALETTE)

///
#define C3_TEXTURE_NONE                UINT32_C(0x00000000) //!<
#define C3_TEXTURE_U_MIRROR            UINT32_C(0x00000001) //!<
#define C3_TEXTURE_U_CLAMP             UINT32_C(0x00000002) //!<
#define C3_TEXTURE_U_BORDER            UINT32_C(0x00000003) //!<
#define C3_TEXTURE_U_SHIFT             0                    //!<
#define C3_TEXTURE_U_MASK              UINT32_C(0x00000003) //!<
#define C3_TEXTURE_V_MIRROR            UINT32_C(0x00000004) //!<
#define C3_TEXTURE_V_CLAMP             UINT32_C(0x00000008) //!<
#define C3_TEXTURE_V_BORDER            UINT32_C(0x0000000c) //!<
#define C3_TEXTURE_V_SHIFT             2                    //!<
#define C3_TEXTURE_V_MASK              UINT32_C(0x0000000c) //!<
#define C3_TEXTURE_W_MIRROR            UINT32_C(0x00000010) //!<
#define C3_TEXTURE_W_CLAMP             UINT32_C(0x00000020) //!<
#define C3_TEXTURE_W_BORDER            UINT32_C(0x00000030) //!<
#define C3_TEXTURE_W_SHIFT             4                    //!<
#define C3_TEXTURE_W_MASK              UINT32_C(0x00000030) //!<
#define C3_TEXTURE_MIN_POINT           UINT32_C(0x00000040) //!<
#define C3_TEXTURE_MIN_ANISOTROPIC     UINT32_C(0x00000080) //!<
#define C3_TEXTURE_MIN_SHIFT           6                    //!<
#define C3_TEXTURE_MIN_MASK            UINT32_C(0x000000c0) //!<
#define C3_TEXTURE_MAG_POINT           UINT32_C(0x00000100) //!<
#define C3_TEXTURE_MAG_ANISOTROPIC     UINT32_C(0x00000200) //!<
#define C3_TEXTURE_MAG_SHIFT           8                    //!<
#define C3_TEXTURE_MAG_MASK            UINT32_C(0x00000300) //!<
#define C3_TEXTURE_MIP_POINT           UINT32_C(0x00000400) //!<
#define C3_TEXTURE_MIP_SHIFT           10                   //!<
#define C3_TEXTURE_MIP_MASK            UINT32_C(0x00000400) //!<
#define C3_TEXTURE_RT                  UINT32_C(0x00001000) //!<
#define C3_TEXTURE_RT_MSAA_X2          UINT32_C(0x00002000) //!<
#define C3_TEXTURE_RT_MSAA_X4          UINT32_C(0x00003000) //!<
#define C3_TEXTURE_RT_MSAA_X8          UINT32_C(0x00004000) //!<
#define C3_TEXTURE_RT_MSAA_X16         UINT32_C(0x00005000) //!<
#define C3_TEXTURE_RT_MSAA_SHIFT       12                   //!<
#define C3_TEXTURE_RT_MSAA_MASK        UINT32_C(0x00007000) //!<
#define C3_TEXTURE_RT_BUFFER_ONLY      UINT32_C(0x00008000) //!<
#define C3_TEXTURE_RT_MASK             UINT32_C(0x0000f000) //!<
#define C3_TEXTURE_COMPARE_LESS        UINT32_C(0x00010000) //!<
#define C3_TEXTURE_COMPARE_LEQUAL      UINT32_C(0x00020000) //!<
#define C3_TEXTURE_COMPARE_EQUAL       UINT32_C(0x00030000) //!<
#define C3_TEXTURE_COMPARE_GEQUAL      UINT32_C(0x00040000) //!<
#define C3_TEXTURE_COMPARE_GREATER     UINT32_C(0x00050000) //!<
#define C3_TEXTURE_COMPARE_NOTEQUAL    UINT32_C(0x00060000) //!<
#define C3_TEXTURE_COMPARE_NEVER       UINT32_C(0x00070000) //!<
#define C3_TEXTURE_COMPARE_ALWAYS      UINT32_C(0x00080000) //!<
#define C3_TEXTURE_COMPARE_SHIFT       16                   //!<
#define C3_TEXTURE_COMPARE_MASK        UINT32_C(0x000f0000) //!<
#define C3_TEXTURE_COMPUTE_WRITE       UINT32_C(0x00100000) //!<
#define C3_TEXTURE_SRGB                UINT32_C(0x00200000) //!<
#define C3_TEXTURE_BLIT_DST            UINT32_C(0x00400000) //!<
#define C3_TEXTURE_READ_BACK           UINT32_C(0x00800000) //!<
#define C3_TEXTURE_BORDER_COLOR_SHIFT  24                   //!<
#define C3_TEXTURE_BORDER_COLOR_MASK   UINT32_C(0x0f000000) //!<
#define C3_TEXTURE_RESERVED_SHIFT      28                   //!<
#define C3_TEXTURE_RESERVED_MASK       UINT32_C(0xf0000000) //!<
#define C3_SAMPLER_DEFAULT_FLAGS       UINT32_C(0x10000000)

#define C3_TEXTURE_BORDER_COLOR(index) ((index << C3_TEXTURE_BORDER_COLOR_SHIFT) & C3_TEXTURE_BORDER_COLOR_MASK)
#define C3_TEXTURE_SAMPLER_BITS_MASK \
  (C3_TEXTURE_U_MASK | C3_TEXTURE_V_MASK | C3_TEXTURE_W_MASK | C3_TEXTURE_MIN_MASK | \
   C3_TEXTURE_MAG_MASK | C3_TEXTURE_MIP_MASK | C3_TEXTURE_COMPARE_MASK )

///
#define C3_VIEW_NONE   UINT8_C(0x00) //!<
#define C3_VIEW_STEREO UINT8_C(0x01) //!<

///
#define C3_SUBMIT_EYE_LEFT  UINT8_C(0x01) //!<
#define C3_SUBMIT_EYE_RIGHT UINT8_C(0x02) //!<
#define C3_SUBMIT_EYE_MASK  UINT8_C(0x03) //!<
#define C3_SUBMIT_EYE_FIRST C3_SUBMIT_EYE_LEFT

inline bool is_compressed(TextureFormat fmt) {
  return fmt >= COMPRESSED_TEXTURE_FORMAT_START && fmt < TEXTURE_FORMAT_COUNT;
}
inline bool is_depth(TextureFormat fmt) {
  return (fmt == DEPTH_16_TEXTURE_FORMAT) || (fmt == DEPTH_24_TEXTURE_FORMAT) || (fmt == DEPTH_32_FLOAT_TEXTURE_FORMAT);
}
inline bool is_stencil(TextureFormat fmt) {
  return false;
}
