class UndoCommand {
  this var _text = "";
  this var _parent;
  this var _children = [];
  
  function this(text, parent) {
    this._text = text;
    this._parent = parent;
    if (parent) {
      parent._children.push(this);
    }
  }
  function Redo() {
    for (var cmd in _children) cmd.Redo();
  }
  function Undo() {
    var n = _children.length;
    for (var i = n - 1; i >= 0; --i) _children[i].Undo();
  }
  function GetID() {
    return -1;
  }
  function GetText() {
    return _text;
  }
  function SetText(text) {
    _text = text;
  }
  function MergeWith(cmd) {
    return false;
  }
}

class UndoStack {
  this var _undo_stack = []
  this var _redo_stack = []
  this var _group_index = 0;
  
  function CanUndo() { return _undo_stack.length > 0; }
  function CanRedo() { return _redo_stack.length > 0; }
  function Clear() {
    _undo_stack.clear();
    _redo_stack.clear();
  }
  function Push(cmd) {
    _redo_stack.clear();
    cmd.Redo();
    var last = _undo_stack.last;
    if (last && last._group_index == _group_index) {
      if (last.MergeWith(cmd)) return;
    }
    cmd._group_index = _group_index;
    _undo_stack.push(cmd);
  }
  function Undo() {
    var cmd = _undo_stack.pop();
    if (cmd) {
      cmd.Undo();
      _redo_stack.push(cmd);
    }
  }
  function Redo() {
    var cmd = _redo_stack.pop();
    if (cmd) {
      cmd.Redo();
      _undo_stack.push(cmd);
    }
  }
  function NewGroup() {
    ++_group_index;
  }
}
